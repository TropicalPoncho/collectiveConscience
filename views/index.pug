extends layout
block css
  link(rel='stylesheet', type="text/css",  media="screen,projection", href='/stylesheets/index.css')
block js
  script(src="//unpkg.com/3d-force-graph")
  script(src="//unpkg.com/three@0.157.0")
  //script(src="//unpkg.com/three-spritetext")
  script(type="importmap").
    {
      "imports": {
        "three": "//unpkg.com/three@0.157.0/build/three.module.js",
        "three/addons/": "//unpkg.com/three@0.157.0/examples/jsm/"
      }
    }
  script(type="module", src="/javascripts/index.js")
  script(type="text/javascript", src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js")

  script(type="x-shader/x-fragment", id="noiseFS").
    float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
    vec3 mod289(vec3 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
    vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
    vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

    float noise(vec3 p){
      vec3 a = floor(p);
      vec3 d = p - a;
      d = d * d * (3.0 - 2.0 * d);

      vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
      vec4 k1 = perm(b.xyxy);
      vec4 k2 = perm(k1.xyxy + b.zzww);

      vec4 c = k2 + a.zzzz;
      vec4 k3 = perm(c);
      vec4 k4 = perm(c + 1.0);

      vec4 o1 = fract(k3 * (1.0 / 41.0));
      vec4 o2 = fract(k4 * (1.0 / 41.0));

      vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
      vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

      return o4.y * d.y + o4.x * (1.0 - d.y);
    }

    //
    // GLSL textureless classic 3D noise "cnoise",
    // with an RSL-style periodic variant "pnoise".
    // Author:  Stefan Gustavson (stefan.gustavson@liu.se)
    // Version: 2011-10-11
    //
    // Many thanks to Ian McEwan of Ashima Arts for the
    // ideas for permutation and gradient selection.
    //
    // Copyright (c) 2011 Stefan Gustavson. All rights reserved.
    // Distributed under the MIT license. See LICENSE file.
    // https://github.com/ashima/webgl-noise
    //
    vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
    vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
    vec4 fade(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}
    vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

    // Classic Perlin noise
    float cnoise(vec4 P){
      vec4 Pi0 = floor(P); // Integer part for indexing
      vec4 Pi1 = Pi0 + 1.0; // Integer part + 1
      Pi0 = mod(Pi0, 289.0);
      Pi1 = mod(Pi1, 289.0);
      vec4 Pf0 = fract(P); // Fractional part for interpolation
      vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0
      vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
      vec4 iy = vec4(Pi0.yy, Pi1.yy);
      vec4 iz0 = vec4(Pi0.zzzz);
      vec4 iz1 = vec4(Pi1.zzzz);
      vec4 iw0 = vec4(Pi0.wwww);
      vec4 iw1 = vec4(Pi1.wwww);

      vec4 ixy = permute(permute(ix) + iy);
      vec4 ixy0 = permute(ixy + iz0);
      vec4 ixy1 = permute(ixy + iz1);
      vec4 ixy00 = permute(ixy0 + iw0);
      vec4 ixy01 = permute(ixy0 + iw1);
      vec4 ixy10 = permute(ixy1 + iw0);
      vec4 ixy11 = permute(ixy1 + iw1);

      vec4 gx00 = ixy00 / 7.0;
      vec4 gy00 = floor(gx00) / 7.0;
      vec4 gz00 = floor(gy00) / 6.0;
      gx00 = fract(gx00) - 0.5;
      gy00 = fract(gy00) - 0.5;
      gz00 = fract(gz00) - 0.5;
      vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);
      vec4 sw00 = step(gw00, vec4(0.0));
      gx00 -= sw00 * (step(0.0, gx00) - 0.5);
      gy00 -= sw00 * (step(0.0, gy00) - 0.5);

      vec4 gx01 = ixy01 / 7.0;
      vec4 gy01 = floor(gx01) / 7.0;
      vec4 gz01 = floor(gy01) / 6.0;
      gx01 = fract(gx01) - 0.5;
      gy01 = fract(gy01) - 0.5;
      gz01 = fract(gz01) - 0.5;
      vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);
      vec4 sw01 = step(gw01, vec4(0.0));
      gx01 -= sw01 * (step(0.0, gx01) - 0.5);
      gy01 -= sw01 * (step(0.0, gy01) - 0.5);

      vec4 gx10 = ixy10 / 7.0;
      vec4 gy10 = floor(gx10) / 7.0;
      vec4 gz10 = floor(gy10) / 6.0;
      gx10 = fract(gx10) - 0.5;
      gy10 = fract(gy10) - 0.5;
      gz10 = fract(gz10) - 0.5;
      vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);
      vec4 sw10 = step(gw10, vec4(0.0));
      gx10 -= sw10 * (step(0.0, gx10) - 0.5);
      gy10 -= sw10 * (step(0.0, gy10) - 0.5);

      vec4 gx11 = ixy11 / 7.0;
      vec4 gy11 = floor(gx11) / 7.0;
      vec4 gz11 = floor(gy11) / 6.0;
      gx11 = fract(gx11) - 0.5;
      gy11 = fract(gy11) - 0.5;
      gz11 = fract(gz11) - 0.5;
      vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);
      vec4 sw11 = step(gw11, vec4(0.0));
      gx11 -= sw11 * (step(0.0, gx11) - 0.5);
      gy11 -= sw11 * (step(0.0, gy11) - 0.5);

      vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);
      vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);
      vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);
      vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);
      vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);
      vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);
      vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);
      vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);
      vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);
      vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);
      vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);
      vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);
      vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);
      vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);
      vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);
      vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);

      vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));
      g0000 *= norm00.x;
      g0100 *= norm00.y;
      g1000 *= norm00.z;
      g1100 *= norm00.w;

      vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));
      g0001 *= norm01.x;
      g0101 *= norm01.y;
      g1001 *= norm01.z;
      g1101 *= norm01.w;

      vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));
      g0010 *= norm10.x;
      g0110 *= norm10.y;
      g1010 *= norm10.z;
      g1110 *= norm10.w;

      vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));
      g0011 *= norm11.x;
      g0111 *= norm11.y;
      g1011 *= norm11.z;
      g1111 *= norm11.w;

      float n0000 = dot(g0000, Pf0);
      float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));
      float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));
      float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));
      float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));
      float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));
      float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));
      float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));
      float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));
      float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));
      float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));
      float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));
      float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));
      float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));
      float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));
      float n1111 = dot(g1111, Pf1);

      vec4 fade_xyzw = fade(Pf0);
      vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);
      vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);
      vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);
      vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);
      float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);
      return 2.2 * n_xyzw;
    }

    // Classic Perlin noise, periodic variant
    float pnoise(vec3 P, vec3 rep){
      vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period
      vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period
      Pi0 = mod289(Pi0);
      Pi1 = mod289(Pi1);
      vec3 Pf0 = fract(P); // Fractional part for interpolation
      vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
      vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
      vec4 iy = vec4(Pi0.yy, Pi1.yy);
      vec4 iz0 = Pi0.zzzz;
      vec4 iz1 = Pi1.zzzz;

      vec4 ixy = permute(permute(ix) + iy);
      vec4 ixy0 = permute(ixy + iz0);
      vec4 ixy1 = permute(ixy + iz1);

      vec4 gx0 = ixy0 * (1.0 / 7.0);
      vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
      gx0 = fract(gx0);
      vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
      vec4 sz0 = step(gz0, vec4(0.0));
      gx0 -= sz0 * (step(0.0, gx0) - 0.5);
      gy0 -= sz0 * (step(0.0, gy0) - 0.5);

      vec4 gx1 = ixy1 * (1.0 / 7.0);
      vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
      gx1 = fract(gx1);
      vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
      vec4 sz1 = step(gz1, vec4(0.0));
      gx1 -= sz1 * (step(0.0, gx1) - 0.5);
      gy1 -= sz1 * (step(0.0, gy1) - 0.5);

      vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
      vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
      vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
      vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
      vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
      vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
      vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
      vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

      vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
      g000 *= norm0.x;
      g010 *= norm0.y;
      g100 *= norm0.z;
      g110 *= norm0.w;
      vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
      g001 *= norm1.x;
      g011 *= norm1.y;
      g101 *= norm1.z;
      g111 *= norm1.w;

      float n000 = dot(g000, Pf0);
      float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
      float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
      float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
      float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
      float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
      float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
      float n111 = dot(g111, Pf1);

      vec3 fade_xyz = fade(Pf0);
      vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
      vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
      float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
      return 2.2 * n_xyz;
    }

block content
  #contentNetwork
  //.floatingTitle TROPICAL PONCHO
  //.floatingMenu
      button.bn#nosotres Nosotres
      button.bn(id="obras") Obras
      button.bn(id="contacto") Contacto
      button.bn(id="egregores") Egregores
      button.bn(id="convocatorias") Convocatorias

  .floatingInfo
    #1.hidden
      p. 
        Tropical Poncho es una plataforma de creación y promoción artística multidisciplinaria 
        que toma a la consciencia y el estudio de esta como punto de partida conceptual. 
      p.
        Nace como productora con el objetivo de crear experiencias artísticas que promuevan
        la expansión de la conciencia, gestionando festivales de arte, que a la vez se conforman 
        como obras de arte conceptuales inmersivas.
      p.
        Estas obras consisten en la apreciación de la percepción, de todo aquello que ingresa 
        en los confines de lo consciente: en ellas la composición considera no sólo las 
        expresiones artísticas de múltiples disciplinas, también influye la interacción misma con 
        les otres espectadores, que pasan a ser protagonistas de la obra de lxs demás y la 
        constitución psicológica del mismo, o sea, su estado emocional, su personalidad, su 
        concreta red neuronal que fue construida a través de todas las decisiones jamás 
        tomadas por esa persona y su entorno, lo que dieron lugar a una conciencia particular y 
        que a su vez origina una percepción subjetiva única.
      p.
        Nuestra misión es, por medio de estas piezas cuyo soporte es la consciencia misma, 
        promover la introspección y el trabajo interno. La idea es invitar al espectador a 
        concientizarse de sí mismo, y de todo lo que nos rodea, en el plano físico y espiritual 
        para lograr, individualmente la expansión de la consciencia y en conjunto de la 
        conciencia colectiva.
      p.
        Utilizamos el arte como medio para informar e mejorar aspectos que atentan contra el 
        ecosistema en el que vivimos, incluyendo no solo el medioambiente, sino también los 
        patrones de comportamiento con los cuales nos relacionamos en sociedad, ya que 
        repercuten de forma directa en nosotrxs y nuestro entorno.
      p.
        En el mediano plazo proyectamos producir y difundir artistas independientes de todas 
        las áreas, compartir su arte y promover su crecimiento, generando redes y colaborando 
        con investigaciones que nos den más información para decidir, creer y crear, pero 
        también desde nuestro aprendizaje de autoconocimiento espiritual.
    #2.hidden
      p.
        Las obras que producimos son Interdum ac facilisis justo cubilia aenean sem, fusce venenatis eleifend hac montes consequat, 
        commodo nullam scelerisque donec litora. Tellus congue torquent placerat aliquam phasellus conubia laoreet ornare lacinia, 
        vulputate nibh quis praesent risus commodo facilisis turpis imperdiet senectus, posuere tempus sodales primis proin habitant tortor litora. 
        Penatibus ad volutpat erat eget blandit torquent aliquam auctor augue, suspendisse velit cum consequat hendrerit mus semper primis conubia, 
        vulputate gravida tincidunt cubilia sagittis sollicitudin nisl ornare. Aptent cursus at leo dis primis libero semper vestibulum, 
        odio orci feugiat senectus quam convallis enim, nascetur sed sodales nisl cubilia sociis arcu.